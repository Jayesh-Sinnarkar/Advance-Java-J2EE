Day 1
1. Confirm that MySql  DB is working fine , using cmd prompt OR mysql workbench

2. Refer , to installation instructions , shared on 1st day of core Java.
2.1 JDK version : JDK 11
2.2 IDE : Eclipse STS 3.9.18
2.3 Create NEW workspace , for advanced java.
2.4 AS per the instructions : in "day1_data\day1_help\web server help\Updated steps in tomcat.txt", add Apache Tomcat web server.
2.5 Confirm if it's starting properly , without any exceptions


3. import day1.1 , in your new workspace.(Edit build path)
Revise JDBC 
TestStatement 
TestPreparedStatement

4. import day1.2 , in your new workspace.(Edit build path)
Revise Layered application.

5. You will have advjava db created in mysql 
Solve, using DB layered approach(Tester, DAO , DBUtils ,POJO,DB)
5.1 User login
i/p : email n password
O/P : login successful with user details or invalid message.

5.2 Display all users under specified role , sorted as per reg amount.
i/p role



Day 2
0. Follow installation instructions from
installation help\Installation instructions for JDK n IDE.txt"
Confirm JDK 11


1. Have you already created a new workspace for Java EE ?
If not : Create a new workspace for Java EE
Follow steps from :
Installation instructions for Tomcat.txt"
Add Tomcat server to the workspace


2. Extract Java EE docs from : "day1_data\day1_help\web_prog_prerequisites\softwares n docs\javaee-api-8.0-javadoc.jar"


Hands on :
3. Create a dynamic web project (day2_lab) , test HTML contents (index.html)
3.1 Add a servlet , to be deployed using annotations


Confirm complete servlet life cycle
(by printing messages on the server console)

Complete the following , with Lab Faculty's help.

4. Use Mysql 8 DB.
Either use Mysql workbench or Mysql cmd line client

4.1 Create a Java project (not a web project : day2.1_lab) with JDBC driver
Copy from ""day2_data\day2_help\voting sql.txt"" , users2 table

Solve : Voter signin 
Steps
1.Tables : users2 
2. POJOs : User (voting status : boolean)
3 Create DBUtils: edit DB user name n pwd
openConnection : 
closeConnection

4. DAO
4.1 UserDao
User  authenticateUser(String email,String pwd) throws SqlException
4.2 Implementation class
5. Write a tester for testing this


Day 3
1. import day3.1 to revise
1.1 Servlet deployment n servlet API
1.2 Servlet deployment using XML tags


2. import day3.2 to revise
2.1 Servlet JDBC integration
Open login.html n trace entire flow.


Day 4
1. import day4.1 in your worspace , to revise
Highlights
1.1 Page Navigation : redirect
1.2 Cookie based session tracking
(Test it first with cookies enabled n then later by blocking the cookies)


2. import day4.2 in your worspace , to revise
Highlights
1.1 Page Navigation : redirect  (SAME as earlier)
1.2 HttpSession i/f  based session tracking
(Test it first with cookies enabled n then later by blocking the cookies)

3. import day4.3 in your worspace , to revise online case study solved so far.
Highlights
1.1 Page Navigation : redirect  (SAME as earlier)
1.2 HttpSession i/f  based session tracking (SAME as earlier)
(Test it first with cookies enabled n then later by blocking the cookies)
1.3 Refer to init of LoginServlet
Created DAOs here.
1.4 In it's doPost : added daos under session scope(setAttribute)
for re usability.
You won't have to create dao instances in other pages(servlets)
1.5 Refer to CandidateList page : for dynamically generated form.


4. OPTIONAL assignment
Complete admin part of the online voting

OR 

Refer to "day4_data\Servlet IPL assignment.png"
Try to create a dynamic drop down list for IPL teams
You will have to start from designing DB tables , POJOs, DAO n then the Servlet .





Day 5
0. day5.1 is going to be revised in the next step.
So DO NOT import day5.1

1. import day5.2 
Edit web.xml , as per your DB  settings
1.1 Revise : servlet config n init-params
Highlights : complete voting case study , with user logged in as a voter
ServlceConfig
init params.
Partially DB independent web application


2. import day5.3
Revise : RequestDispatcher's forward technique (IMPORTANT)

3. import day5.4 
Revise : RequestDispatcher's include technique

4. OPTIONAL (can be done later)
import "day5-data\day5_help\demo of config_vs_ctx\config_vs_ctx"
To revise difference between config n context

Hands on
No New assignments 
Complete entire pending work (either admin part of voting case study OR IPL )

Refer to these diagrams (after the lab session , in self study time)
1. refer to HttpSession internals
2. refer to complete servlet life cycle
3. refer : regarding ServletConfig n ServletContext readmes

Day 6

1. Revise JSP syntax
1.1 import day6.2 , in your workspace.
Open index.jsp n trace all the links , to revise
JSP comments
JSP scripting elements
Simple JSP based assignment

1.2 JSP based assignment (Mandatory for the practice of JSP basic syntax) 
Do it with the help of Lab faculty
Ref : "day6_data\day6_help\student admission JSP.png"

2. MUST Complete IPL assignment , using servlets. (Do it with the help of Lab faculty)
Refer : "day6-data\day6_help\IPL sql.txt" 
DB tables : teams , players
Copy your earlier working DBUtils
You have to develop POJOs , DAOs, Servlets(dyn web pages) 
I have already uploaded partial solution on g drive (day5-lab-data)
Test it.


Instructions
1. refer to day5_lab 
(uploaded yesterday on g drive)
Understand it n continue with these steps
Continuation of IPL case study

1.1 What will be the sample URL after submitting "Add Player Form"?

http://localhost:8080/day5_lab/validate?team_id=2&player_name=a&dob=2001-05-09&avg=67&wickets=10


1.2 To get a specific team details , for the next validation page 
Add a method in TeamDao

Team getTeamDetails(int teamId) throws SQLException
Add the implementation in TeamDaoImpl class

1.3 Create PlayerDao , to add below method
String addPlayer(Player newPlayer) throws SQLException
Add the implementation in PlayerDaoImpl class

Try n complete this much .


Day 7
No new assignments !

1. import day7.1 in your workspace , to revise
1.1 URL rewriting
1.2 Centralized error handling in JSP
1.3 page n include directive
1.4 JSP actions : forward , include , param

(After the lab session , please revise all of abover from , readme_jsp.txt)


2. import day7.2 in your workspace , to revise
2.1 The layered architecture
JSP --Java Bean -- DAO (uses DBUtils) -- POJO --DB

2.2 Refer to welcome page : login.jsp 
n trace complete flow .

3. MANDATORY requirement for tomorrow.
Lab faculties , please help students here.
3.1 Copy "day7-data\code\test_hibernate_basic" under your workspace folder.

3.2 import test_hibernate_basic , as existing Maven project in your workspace.
(Lab Faculties will demo this. You simply follow. )
You will need internet connection here.
Hibernate dependencies (jar files) will get downloaded from net, to your machine.
Reference pic : "day7-data\hibernate maven dependencies.png"
Your project SHOULD have all of these dependencies downloaded.
I have not yet explained anything on Maven. Will be done later.
Today just keep the JARs downloaded.

4. After finishing earlier steps   , complete pending work.











